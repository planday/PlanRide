/* tslint:disable */
/* eslint-disable */
/**
 * PlanRide.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CountryViewModel,
    CountryViewModelFromJSON,
    CountryViewModelToJSON,
    LocationViewModel,
    LocationViewModelFromJSON,
    LocationViewModelToJSON,
    RegionViewModel,
    RegionViewModelFromJSON,
    RegionViewModelToJSON,
} from '../models';

export interface CitiesRequest {
    countryCode: string;
    search?: string;
}

export interface RegionsRequest {
    countryCode: string;
}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI {

    /**
     */
    async citiesRaw(requestParameters: CitiesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LocationViewModel>>> {
        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling cities.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/country/{countryCode}/cities`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationViewModelFromJSON));
    }

    /**
     */
    async cities(requestParameters: CitiesRequest, initOverrides?: RequestInit): Promise<Array<LocationViewModel>> {
        const response = await this.citiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async countriesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CountryViewModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CountryViewModelFromJSON));
    }

    /**
     */
    async countries(initOverrides?: RequestInit): Promise<Array<CountryViewModel>> {
        const response = await this.countriesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async regionsRaw(requestParameters: RegionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RegionViewModel>>> {
        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling regions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/country/{countryCode}/regions`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegionViewModelFromJSON));
    }

    /**
     */
    async regions(requestParameters: RegionsRequest, initOverrides?: RequestInit): Promise<Array<RegionViewModel>> {
        const response = await this.regionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
