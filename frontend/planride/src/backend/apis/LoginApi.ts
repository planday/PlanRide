/* tslint:disable */
/* eslint-disable */
/**
 * PlanRide.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AccountLoginGetRequest {
    returnUrl?: string;
}

export interface AccountLoginPostRequest {
    username: string;
    password: string;
    rememberLogin?: boolean;
    returnUrl?: string;
    button?: string;
}

/**
 * 
 */
export class LoginApi extends runtime.BaseAPI {

    /**
     */
    async accountLoginGetRaw(requestParameters: AccountLoginGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.returnUrl !== undefined) {
            queryParameters['returnUrl'] = requestParameters.returnUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountLoginGet(requestParameters: AccountLoginGetRequest = {}, initOverrides?: RequestInit): Promise<void> {
        await this.accountLoginGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async accountLoginPostRaw(requestParameters: AccountLoginPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling accountLoginPost.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling accountLoginPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.username !== undefined) {
            queryParameters['Username'] = requestParameters.username;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['Password'] = requestParameters.password;
        }

        if (requestParameters.rememberLogin !== undefined) {
            queryParameters['RememberLogin'] = requestParameters.rememberLogin;
        }

        if (requestParameters.returnUrl !== undefined) {
            queryParameters['ReturnUrl'] = requestParameters.returnUrl;
        }

        if (requestParameters.button !== undefined) {
            queryParameters['button'] = requestParameters.button;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/account/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountLoginPost(requestParameters: AccountLoginPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.accountLoginPostRaw(requestParameters, initOverrides);
    }

}
